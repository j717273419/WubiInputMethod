// Generated by Swift version 1.0 (swift-600.0.51.4)

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif
#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"

#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
#endif

@class UIColor;
@class UIImage;
@class UIImageView;
@class UILabel;
@class NSCoder;

SWIFT_CLASS("_TtC7Slidden15KeyboardKeyView")
@interface KeyboardKeyView : UIControl
@property (nonatomic, copy) NSString * keyCap;
@property (nonatomic, copy) NSString * outputText;
@property (nonatomic) BOOL shifted;
@property (nonatomic) UIColor * color;
@property (nonatomic) UIColor * textColor;
@property (nonatomic) UIColor * selectedColor;
@property (nonatomic) BOOL shouldColorImage;

/// If image is set, the key will display the image instead of the keyCap
@property (nonatomic) UIImage * image;
@property (nonatomic) UIImageView * imageView;
@property (nonatomic) UILabel * textLabel;

/// MARK: Setup
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setupLayout;
- (void)layoutSubviews;
@end

@protocol UITextDocumentProxy;

SWIFT_CLASS("_TtC7Slidden20KeyboardTextDocument")
@interface KeyboardTextDocument : NSObject
@property (nonatomic) id <UITextDocumentProxy> textDocumentProxy;
- (instancetype)initWithProxy:(id <UITextDocumentProxy>)proxy OBJC_DESIGNATED_INITIALIZER;
- (void)insertText:(NSString *)text;
- (NSString *)text;
- (NSString *)selectedText;
- (NSArray *)sentences;
- (NSArray *)words;
- (NSString *)lastSentence;
- (void)deleteAllText;
- (void)insertTextAtPosition:(NSString *)text position:(NSUInteger)position;
@end

@class NSIndexPath;

SWIFT_CLASS("_TtC7Slidden12KeyboardView")
@interface KeyboardView : UIView
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)reloadKeys;
- (void)reloadKeyAtIndexpath:(NSIndexPath *)indexPath;
- (void)setupLayout;

/// MARK: Layout
- (void)updateConstraints;
- (void)addKey:(KeyboardKeyView *)key row:(NSInteger)row;

/// MARK: Public
- (void)setShift:(BOOL)shift;
- (void)toggleShift;
- (void)layoutSubviews;
@end


SWIFT_PROTOCOL("_TtP7Slidden20KeyboardViewDelegate_")
@protocol KeyboardViewDelegate
@optional
- (void)keyPressed:(KeyboardKeyView *)key;
- (void)specialKeyPressed:(KeyboardKeyView *)key;
- (void)backspaceKeyPressed:(KeyboardKeyView *)key;
- (void)backspaceKeyUp:(KeyboardKeyView *)key;
- (void)spaceKeyPressed:(KeyboardKeyView *)key;
- (void)shiftKeyPressed:(KeyboardKeyView *)key;
- (void)returnKeyPressed:(KeyboardKeyView *)key;
- (void)modeChangeKeyPressed:(KeyboardKeyView *)key;
- (void)nextKeyboardKeyPressed:(KeyboardKeyView *)key;
- (void)keyClickSound;
@end

@protocol UITextInput;
@class NSBundle;

SWIFT_CLASS("_TtC7Slidden22KeyboardViewController")
@interface KeyboardViewController : UIInputViewController <KeyboardViewDelegate>
@property (nonatomic) KeyboardView * keyboardView;
@property (nonatomic) KeyboardTextDocument * textDocument;
@property (nonatomic) BOOL autoShifted;
@property (nonatomic) BOOL shouldLayoutKeyboardConstraintsAutomatically;
- (void)viewDidLoad;

/// MARK: Keyboard Datasource
- (NSInteger)numberOfRowsInKeyboardView:(KeyboardView *)keyboardView;
- (NSInteger)keyboardView:(KeyboardView *)keyboardView numberOfKeysInRow:(NSInteger)row;
- (KeyboardKeyView *)keyboardView:(KeyboardView *)keyboardView keyAtIndexPath:(NSIndexPath *)indexPath;
- (void)updateViewConstraints;

/// MARK: Text Management
- (void)textWillChange:(id <UITextInput>)textInput;
- (void)textDidChange:(id <UITextInput>)textInput;

/// MARK: Key Actions
- (void)keyPressed:(KeyboardKeyView *)key;
- (void)specialKeyPressed:(KeyboardKeyView *)key;

/// Default action is to delete the last character.
- (void)backspaceKeyPressed:(KeyboardKeyView *)key;

/// Default action is to insert one blank "space" character.
- (void)spaceKeyPressed:(KeyboardKeyView *)key;
- (void)shiftKeyPressed:(KeyboardKeyView *)key;
- (void)returnKeyPressed:(KeyboardKeyView *)key;
- (void)modeChangeKeyPressed:(KeyboardKeyView *)key;
- (void)backspaceKeyUp:(KeyboardKeyView *)key;
- (void)nextKeyboardKeyPressed:(KeyboardKeyView *)key;
- (void)didReceiveMemoryWarning;
- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (instancetype)initWithCoder:(NSCoder *)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface UIColor (SWIFT_EXTENSION(Slidden))
- (instancetype)initWithRed:(NSInteger)red green:(NSInteger)green blue:(NSInteger)blue;
- (instancetype)initWithHex:(NSInteger)hex;
+ (UIColor *)randomColor;
@end

#pragma clang diagnostic pop
